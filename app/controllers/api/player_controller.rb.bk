class Api::PlayerController < Api::SbController
  
  ###
  # Method: updateSocialProfile
  # 
  # Input: DeviceID, Services,
  #        Fullname, Username, LangCode
  #        SocialID, SocialType, SocialRange, Services
  #        RequestID, SessionID, Token
  #
  # Return: Status (true), RequestID
  ###
  def updateSocialProfile
    if(request.post?)
      # Check if user exists
      cSocialID = self.findKeyInJSON(params[:params], "SocialID", 2)
      cSocialType = self.findKeyInJSON(params[:params], "SocialType", 2)
      cSocialRange = self.findKeyInJSON(params[:params], "SocialRange", 2)
      cFullname = self.findKeyInJSON(params[:params], "Fullname", 2)
      cUsername = self.findKeyInJSON(params[:params], "Username", 2)
      cServices = self.findKeyInJSON(params[:params], "Services", 2)
      
      # Check user's mobile OS
      if(cServices["AndroidPush"] != '')
        cDeviceToken = cServices["AndroidPush"]
        cMobileOS = 'Android'
      else
        cDeviceToken = cServices["AppleAPNS"]
        cMobileOS = 'iOS'
      end
      

      if(Player.findUser(cSocialID, cSocialType)) # If exists, return true
        # Ignore
        a = Player.find("user_" + cSocialType.to_s + "_" + cSocialID.to_s)
        a.deviceToken = cDeviceToken
        a.mobileOS = cMobileOS
        a.save
      else # Else, create new, give him 100 showbucks, 10 RR, and 5 RWBR for free
        Player.createUser(cSocialID, cSocialType, cFullname, cUsername, cSocialRange, cMobileOS, cDeviceToken)
      end
      
      # Return JSON response
      cRequestID = self.findKeyInJSON(params[:params], "RequestID", 1)
      rData = {"Status" => "True"}
      self.jsonRender(rData, 'User Information Updated', cRequestID, '100')
    end
  end
  
  
  
  
  ###
  # Method: getMyProfile
  # 
  # Input: DeviceID, LangCode
  #        SocialID, SocialType, SocialRange
  #        RequestID, SessionID, Token
  #
  # Return: User's Coins, RequestID
  ###
  def getMyProfile
    if(request.post?)
      cSocialID = self.findKeyInJSON(params[:params], "SocialID", 2)
      cSocialType = self.findKeyInJSON(params[:params], "SocialType", 2)
      
      rData = {}
      
      # Just return this player's coin amount
      begin
        u = Player.findUser(cSocialID, cSocialType)
        rData = {"Coins" => u.coins.to_s, "RedRockets" => u.redRockets.to_s, "RWBRockets" => u.rwbRockets.to_s}
        rStatus = "100"
      rescue Exception => e
        rStatus = "101"
      end
      
      # Return JSON response
      cRequestID = self.findKeyInJSON(params[:params], "RequestID", 1)
      self.jsonRender(rData, 'User Coins', cRequestID, rStatus)
    end
  end
  
  
  
  
  ###
  # Method: getMyInvitedGame
  # 
  # Input: DeviceID, LangCode
  #        SocialID, SocialType, SocialRange
  #        RequestID, SessionID, Token
  #
  # Return: VideoInfoID (array)
  #         RequestID
  ###
  def getMyInvitedGame
    if(request.post?)
      cSocialID = self.findKeyInJSON(params[:params], "SocialID", 2)
      cSocialType = self.findKeyInJSON(params[:params], "SocialType", 2)
      
      rData = []
      
      begin
        a = Sbdbindexing.find('user_' + cSocialType.to_s + '_invitedgame_' + cSocialID.to_s)
        invitedGameIDs = a.arrayvalue
        
        invitedGameIDs.each do |aGameID|
          # check if game has not been played
          begin
            b = Game.find(aGameID)
            gameStatus = b.gameStatus
            ownerSocialID = b.ownerSocialID
            createdTime = b.created_at
            
            # get OwnerSocialFullname
            c = Player.find('user_' + cSocialType + '_' + ownerSocialID)
            ownerSocialFullname = c.fullname
            
            if(gameStatus.to_s == "0")
              gameInfo = {
                "GameID" => aGameID,
                "OwnerSocialFullname" => ownerSocialFullname,
                "OwnerSocialID" => ownerSocialID,
                "CreatedTime" => createdTime
              }
              rData = rData << gameInfo
            end
          rescue Exception => e
          end
        end
        
        rData = rData.reverse
        
        rStatus = '100'
      rescue Exception => e
        rStatus = '101'
      end
      
      # Return JSON response
      cRequestID = self.findKeyInJSON(params[:params], "RequestID", 1)
      self.jsonRender(rData, 'My Invited Games', cRequestID, rStatus)
    end
  end
  
  
  
  
  ###
  # Method: getMyCreatedGame
  # 
  # Input: DeviceID, LangCode
  #        SocialID, SocialType, SocialRange
  #        RequestID, SessionID, TokenOpponentSocialID
  #
  # Return: VideoInfoID (array)
  #         RequestID
  ###
  def getMyCreatedGame
    if(request.post?)
      cSocialID = self.findKeyInJSON(params[:params], "SocialID", 2)
      cSocialType = self.findKeyInJSON(params[:params], "SocialType", 2)
      
      rData = []
      
      begin
        a = Sbdbindexing.find('user_' + cSocialType.to_s + '_createdgame_' + cSocialID.to_s)
        createdGameIDs = a.arrayvalue
        
        createdGameIDs.each do |aGameID|
          # check if game has not been played
          begin
            b = Game.find(aGameID)
            opponentSocialID = b.opponentSocialID
            createdTime = b.created_at
            gameStatus = b.gameStatus
            
            # get opponentSocialFullname
            c = Player.find('user_' + cSocialType + '_' + opponentSocialID)
            opponentSocialFullname = c.fullname
            
            if(gameStatus.to_s == "0")
              gameInfo = {
                "OpponentSocialID" => opponentSocialID,
                "OpponentSocialFullname" => opponentSocialFullname,
                "GameID" => aGameID,
                "CreatedTime" => createdTime
              }
              rData = rData << gameInfo
            end
          rescue Exception => e
          end
        end
        
        rData = rData.reverse
        
        rStatus = '100'
      rescue Exception => e
        rStatus = '101'
      end
      
      # Return JSON response
      cRequestID = self.findKeyInJSON(params[:params], "RequestID", 1)
      self.jsonRender(rData, 'My Created Games', cRequestID, rStatus)
    end
  end
  
  
  
  
  ###
  # Method: getMyGameHistory
  # 
  # Input: DeviceID, LangCode
  #        SocialID, SocialType, SocialRange
  #        RequestID, SessionID, Token
  #
  # Return: VideoInfoID (array)
  #         RequestID
  ###
  def getMyGameHistory
    
  end
  
  #
  # @End of FILE
  #
end
